{"version":3,"file":"browser.js","sources":["../node_modules/@stdlib/math-base-assert-is-nan/lib/main.js","../node_modules/@stdlib/math-base-assert-is-nan/lib/index.js","../node_modules/@stdlib/math-base-special-abs/lib/index.js","../node_modules/@stdlib/math-base-special-abs/lib/main.js","../node_modules/@stdlib/constants-float64-pinf/lib/index.js","../lib/minmaxabs.js","../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Tests if a double-precision floating-point numeric value is `NaN`.\n*\n* @param {number} x - value to test\n* @returns {boolean} boolean indicating whether the value is `NaN`\n*\n* @example\n* var bool = isnan( NaN );\n* // returns true\n*\n* @example\n* var bool = isnan( 7.0 );\n* // returns false\n*/\nfunction isnan( x ) {\n\treturn ( x !== x );\n}\n\n\n// EXPORTS //\n\nmodule.exports = isnan;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test if a double-precision floating-point numeric value is `NaN`.\n*\n* @module @stdlib/math-base-assert-is-nan\n*\n* @example\n* var isnan = require( '@stdlib/math-base-assert-is-nan' );\n*\n* var bool = isnan( NaN );\n* // returns true\n*\n* bool = isnan( 7.0 );\n* // returns false\n*/\n\n// MODULES //\n\nvar isnan = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = isnan;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute an absolute value of a double-precision floating-point number.\n*\n* @module @stdlib/math-base-special-abs\n*\n* @example\n* var abs = require( '@stdlib/math-base-special-abs' );\n*\n* var v = abs( -1.0 );\n* // returns 1.0\n*\n* v = abs( 2.0 );\n* // returns 2.0\n*\n* v = abs( 0.0 );\n* // returns 0.0\n*\n* v = abs( -0.0 );\n* // returns 0.0\n*\n* v = abs( NaN );\n* // returns NaN\n*/\n\n// MODULES //\n\nvar abs = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = abs;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Computes the absolute value of a double-precision floating-point number `x`.\n*\n* @param {number} x - input value\n* @returns {number} absolute value\n*\n* @example\n* var v = abs( -1.0 );\n* // returns 1.0\n*\n* @example\n* var v = abs( 2.0 );\n* // returns 2.0\n*\n* @example\n* var v = abs( 0.0 );\n* // returns 0.0\n*\n* @example\n* var v = abs( -0.0 );\n* // returns 0.0\n*\n* @example\n* var v = abs( NaN );\n* // returns NaN\n*/\nfunction abs( x ) {\n\treturn Math.abs( x ); // eslint-disable-line stdlib/no-builtin-math\n}\n\n\n// EXPORTS //\n\nmodule.exports = abs;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Double-precision floating-point positive infinity.\n*\n* @module @stdlib/constants-float64-pinf\n* @type {number}\n*\n* @example\n* var FLOAT64_PINF = require( '@stdlib/constants-float64-pinf' );\n* // returns Infinity\n*/\n\n\n// MAIN //\n\n/**\n* Double-precision floating-point positive infinity.\n*\n* ## Notes\n*\n* Double-precision floating-point positive infinity has the bit sequence\n*\n* ```binarystring\n* 0 11111111111 00000000000000000000 00000000000000000000000000000000\n* ```\n*\n* @constant\n* @type {number}\n* @default Number.POSITIVE_INFINITY\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_PINF = Number.POSITIVE_INFINITY; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nmodule.exports = FLOAT64_PINF;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnan from '@stdlib/math-base-assert-is-nan' ;\nimport abs from '@stdlib/math-base-special-abs' ;\nimport PINF from '@stdlib/constants-float64-pinf' ;\n\n\n// MAIN //\n\n/**\n* Returns the minimum and maximum absolute values.\n*\n* @private\n* @param {(Array|TypedArray|Object)} out - output object\n* @param {number} x - first number\n* @param {number} [y] - second number\n* @param {...number} [args] - numbers\n* @returns {(Array|TypedArray|Object)} minimum and maximum absolute values\n*\n* @example\n* var out = [ 0.0, 0.0 ];\n* var v = minmaxabs( out, 3.14, 4.2 );\n* // returns [ 3.14, 4.2 ]\n*\n* var bool = ( v === out );\n* // returns true\n*\n* @example\n* var out = [ 0.0, 0.0 ];\n* var v = minmaxabs( out, -5.9, 3.14, 4.2 );\n* // returns [ 3.14, 5.9 ]\n*\n* @example\n* var out = [ 0.0, 0.0 ];\n* var v = minmaxabs( out, 3.14, NaN );\n* // returns [ NaN, NaN ]\n*\n* @example\n* var out = [ 0.0, 0.0 ];\n* var v = minmaxabs( out, +0.0, -0.0 );\n* // returns [ 0.0, 0.0 ]\n*/\nfunction minmaxabs( out, x, y ) {\n\tvar len;\n\tvar min;\n\tvar max;\n\tvar ax;\n\tvar ay;\n\tvar av;\n\tvar v;\n\tvar i;\n\n\tlen = arguments.length;\n\tif ( len === 2 ) {\n\t\tax = abs( x );\n\t\tout[ 0 ] = ax;\n\t\tout[ 1 ] = ax;\n\t\treturn out;\n\t}\n\tif ( len === 3 ) {\n\t\tif ( isnan( x ) || isnan( y ) ) {\n\t\t\tout[ 0 ] = NaN;\n\t\t\tout[ 1 ] = NaN;\n\t\t\treturn out;\n\t\t}\n\t\tax = abs( x );\n\t\tay = abs( y );\n\t\tif ( ax < ay ) {\n\t\t\tout[ 0 ] = ax;\n\t\t\tout[ 1 ] = ay;\n\t\t\treturn out;\n\t\t}\n\t\tout[ 0 ] = ay;\n\t\tout[ 1 ] = ax;\n\t\treturn out;\n\t}\n\tmin = PINF;\n\tmax = 0.0;\n\tfor ( i = 0; i < len; i++ ) {\n\t\tv = arguments[ i ];\n\t\tif ( isnan( v ) ) {\n\t\t\tout[ 0 ] = NaN;\n\t\t\tout[ 1 ] = NaN;\n\t\t\treturn out;\n\t\t}\n\t\tav = abs( v );\n\t\tif ( av < min ) {\n\t\t\tmin = av;\n\t\t}\n\t\tif ( av > max ) {\n\t\t\tmax = av;\n\t\t}\n\t}\n\tout[ 0 ] = min;\n\tout[ 1 ] = max;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default minmaxabs;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport compute from './minmaxabs.js' ;\n\n\n// MAIN //\n\n/**\n* Returns the minimum and maximum absolute values.\n*\n* @param {(Array|TypedArray|Object)} [out] - output object\n* @param {number} x - first number\n* @param {number} [y] - second number\n* @param {...number} [args] - numbers\n* @returns {(Array|TypedArray|Object)} minimum and maximum absolute values\n*\n* @example\n* var v = minmaxabs( 3.14, 4.2 );\n* // returns [ 3.14, 4.2 ]\n*\n* @example\n* var out = [ 0.0, 0.0 ];\n* var v = minmaxabs( out, -5.9, 3.14, 4.2 );\n* // returns [ 3.14, 5.9 ]\n*\n* var bool = ( v === out );\n* // returns true\n*\n* @example\n* var v = minmaxabs( 3.14, NaN );\n* // returns [ NaN, NaN ]\n*\n* @example\n* var v = minmaxabs( +0.0, -0.0 );\n* // returns [ 0.0, 0.0 ]\n*/\nfunction minmaxabs( out, x, y ) {\n\tvar bool;\n\tvar args;\n\tvar len;\n\tvar i;\n\n\tlen = arguments.length;\n\tif ( len === 1 ) {\n\t\treturn compute( [ 0.0, 0.0 ], out );\n\t}\n\tbool = ( typeof arguments[ 0 ] === 'number' );\n\tif ( len === 2 ) {\n\t\tif ( bool ) {\n\t\t\treturn compute( [ 0.0, 0.0 ], out, x );\n\t\t}\n\t\treturn compute( out, x );\n\t}\n\tif ( len === 3 ) {\n\t\tif ( bool ) {\n\t\t\treturn compute( [ 0.0, 0.0 ], out, x, y );\n\t\t}\n\t\treturn compute( out, x, y );\n\t}\n\tif ( bool ) {\n\t\targs = [];\n\t\targs.push( [ 0.0, 0.0 ] );\n\t\ti = 0;\n\t} else {\n\t\targs = [];\n\t\targs.push( arguments[ 0 ] );\n\t\ti = 1;\n\t}\n\tfor ( ; i < len; i++ ) {\n\t\targs.push( arguments[ i ] );\n\t}\n\treturn compute.apply( null, args );\n}\n\n\n// EXPORTS //\n\nexport default minmaxabs;\n"],"names":["lib","x","Math","abs","Number","POSITIVE_INFINITY","minmaxabs","out","y","len","min","max","ax","ay","av","v","i","arguments","length","isnan","NaN","PINF","bool","args","compute","push","apply"],"mappings":";yCA2CA,ICDAA,EDNA,SAAgBC,GACf,OAASA,GAAMA,GEchBD,ECHA,SAAcC,GACb,OAAOC,KAAKC,IAAKF,ICMlBD,EALmBI,OAAOC,kBCY1B,SAASC,EAAWC,EAAKN,EAAGO,GAC3B,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAGJ,GAAa,KADbP,EAAMQ,UAAUC,QAKf,OAHAN,EAAKT,EAAKF,GACVM,EAAK,GAAMK,EACXL,EAAK,GAAMK,EACJL,EAER,GAAa,IAARE,EACJ,OAAKU,EAAOlB,IAAOkB,EAAOX,IACzBD,EAAK,GAAMa,IACXb,EAAK,GAAMa,IACJb,IAERK,EAAKT,EAAKF,KACVY,EAAKV,EAAKK,KAETD,EAAK,GAAMK,EACXL,EAAK,GAAMM,EACJN,IAERA,EAAK,GAAMM,EACXN,EAAK,GAAMK,EACJL,GAIR,IAFAG,EAAMW,EACNV,EAAM,EACAK,EAAI,EAAGA,EAAIP,EAAKO,IAAM,CAE3B,GAAKG,EADLJ,EAAIE,UAAWD,IAId,OAFAT,EAAK,GAAMa,IACXb,EAAK,GAAMa,IACJb,GAERO,EAAKX,EAAKY,IACAL,IACTA,EAAMI,GAEFA,EAAKH,IACTA,EAAMG,GAKR,OAFAP,EAAK,GAAMG,EACXH,EAAK,GAAMI,EACJJ,SC3DR,SAAoBA,EAAKN,EAAGO,GAC3B,IAAIc,EACAC,EACAd,EACAO,EAGJ,GAAa,KADbP,EAAMQ,UAAUC,QAEf,OAAOM,EAAS,CAAE,EAAK,GAAOjB,GAG/B,GADAe,EAAmC,iBAAnBL,UAAW,GACd,IAARR,EACJ,OAAKa,EACGE,EAAS,CAAE,EAAK,GAAOjB,EAAKN,GAE7BuB,EAASjB,EAAKN,GAEtB,GAAa,IAARQ,EACJ,OAAKa,EACGE,EAAS,CAAE,EAAK,GAAOjB,EAAKN,EAAGO,GAEhCgB,EAASjB,EAAKN,EAAGO,GAWzB,IATKc,IACJC,EAAO,IACFE,KAAM,CAAE,EAAK,IAClBT,EAAI,KAEJO,EAAO,IACFE,KAAMR,UAAW,IACtBD,EAAI,GAEGA,EAAIP,EAAKO,IAChBO,EAAKE,KAAMR,UAAWD,IAEvB,OAAOQ,EAAQE,MAAO,KAAMH"}